<apex:page standardController="Loop__DDP__c" extensions="Loop.editFormExt" title="Form Edit: {!ddpWrapper.DDP.Name}" id="ap">
<apex:stylesheet value="{!URLFOR($Resource.Loop__Scripts, 'fancybox/jquery.fancybox-1.3.4.css')}" />
<style>
    div.bgdl {
        height: 41px;
        padding-left: 4px;
        height: 38px;
        border-bottom: 3px solid #178AFF;
        margin-top: -15px;
    }
    ul.tabs {
        padding: 0;
        margin: 0;
    }
    ul.tabs li {
        float: left;
        border-color: #BBBBBB #BBBBBB transparent;
        border-style: solid;
        border-width: 1px 1px 0 1px;
        background-color: #F1F1F1;
        -moz-border-radius: 4px 4px 0 0;
        -webkit-border-radius: 4px 4px 0 0;
        display: inline-block;
        padding: 0 8px;
        height: 32px;
        margin: 5px 0 -3px 5px;
    }
    ul.tabs li div.outer {
        padding-bottom: 2px;
        font-weight: bold;
        margin-right: -13px;
        padding: 8px 8px 4px 0;
    }
    ul.tabs li div.outer div {
        line-height: normal;
        margin: 0;
        padding 0;
    }
    ul.tabs li div.outer div a { text-decoration: none; }
    span.defaultspan span a, span.defaultspan a { text-decoration: none; }
    ul.tabs li.active {
        /*height: 35px;*/
        border-bottom: 3px solid #E2E7EF;
        border-color: #178AFF #178AFF #E2E7EF;
        background: -moz-linear-gradient(90deg,#E2E7EF,#FFFFFF);
        background: -webkit-gradient(linear, center bottom, center top, from(#E2E7EF), to(#FFFFFF));
        -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#FFFFFF, endColorstr=#E2E7EF)";
    }
    ul.tabs li {
        border-bottom: 3px solid #178AFF;
    }
    div.dlPageBlock {
        border-top: 3px solid #178AFF;
        -moz-border-radius: 4px 4px 4px 4px;
        -webkit-border-radius: 4px 4px 4px 4px;
    }
    div.dlPageBlock div.pbSubheader.tertiaryPalette {
        margin-top: 0;
        border-width: 0;
    }
    body .pbBody table.list tr.topAlign td { vertical-align: top; }
    .invisible { display: none; }
    div.jqInfo {
        position: absolute;
        display: none;
        border: 3px solid #A4CAEE;
        background-color: #FFFFFF;
        width: 205px;
        padding: 10px;
    }
    div.jqInfo ul {
        padding: 0;
        margin: 10px 0px 5px 25px;
    }
    img.jqInfoIcon {
        vertical-align: top;
        cursor: pointer;
    }
    .pointer { cursor: pointer; }
    
    /* New Styles */
    .tab {
        user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
    }
    .tab div {
        background-image: none;
    }
    .tab .outer div {
        padding: 0;
    }
    .content > div {
        display: none;
    }
    .content {
        margin-top: 0;
    }
    .bPageBlock .pbBody .content .pbSubheader {
        margin-top: 0;
        border-top: transparent;
    }
    .content > .active {
        display: block;
    }
    .formLoading {
        position: absolute;
        height: 100%;
        width: 100%;
        top: 0;
        left: 0;
        padding: 0;
        background-color: white;
        border: 1px solid #CACACA;
        color: #666;
        font-size: 95%;
        text-align: center;
        font-weight: bold;
        margin-left: auto;
        margin-right: auto;
    }
    .formLoading .loadingContent {
        position: relative;
        top: 50%;
        height: 100%;
    }
    .formLoading img {
        border: none;
        vertical-align: middle;
    }
    .formLoading img, .loadingText {
        top: -10px;
        position: relative
    }
    .loadingText {
        padding-left: 5px;
    }
    /* ActionSupport Styles */
    .statusContainer {
        position: relative;
        padding: 1px 0 0 5px;
    }
    .status {
        right: -24px;
        top: 0;
    }
    .status.isIE {
        top: -11px;
    }
    .msgStepEmpty {
        padding: 15px 10px 3px;
        font-weight: bold;
    }
    .hiddenCell, .hidden {
        display: none;
    }
    .sfDefaultValueOn .defaultView, 
    .sfObjectView, .sfFieldView {
        display: none;
    }
    .sfDefaultValueOn .sfObjectView, .sfDefaultValueOn .sfFieldView {
        display: block;
    }
    .colSelect {
        width: 25px;
    }
    .optStep {
        font-weight: bold;
    }
    .optField {
        padding-left: 10px;
    }
    .available, .selected {
        height: 211px;
    }
    .panelLabel {
        width: 40px;
        display: inline-block;
        font-weight: bold;
    }
    
    /* fancybox */
    #fancybox-outer .dialogClose, #fancybox-outer .dialogCloseOn {
        position: absolute;
        top: 8px;
        right: 16px;
        z-index: 2000;
    }
    #fancybox-content {
        top: 28px;
        background-color: #F8F8F8;
        border-color: #F8F8F8;
    }
    .editDialog #fancybox-outer {
        background: transparent;
    }
    .editDialog #fancybox-content, .editDialog #fancybox-content .bPageBlock {
        background-color: #FFF;
        border-color: #FFF;
    }
    #fancybox-content .bPageBlock {
        border: none;
    }
    #fancybox-content .dialogContent {
        display: block;
        width: 540px;
    }
    .editDialog #fancybox-title {
        width: 100%;
        margin: 0;
        padding: 0;
        background: transparent url('/img/alohaSkin/overlayTopLft.png') -5px top no-repeat;
        -moz-border-radius: 5px 5px 0 0;
        -webkit-border-radius: 5px 5px 0 0;
        border-radius: 5px 5px 0 0;
    }
    .editDialog #fancybox-title-inside {
        padding: 6px 10px;
        margin: 0;
    }
    .editDialog #fancybox-content {
        -moz-border-radius: 0 0 5px 5px;
        -webkit-border-radius: 0 0 5px 5px;
        border-radius: 0 0 5px 5px;
    }
    /*.editDialog #fancybox-title {
        width: 100%;
        margin: 0;
        padding: 0;
        background: transparent url('/img/alohaSkin/overlay_crns.png') right top no-repeat;
    }
    .editDialog #fancybox-title-inside {
        background: url('/img/alohaSkin/overlayTopLft.png') left top no-repeat;
        padding: 6px 0 6px 10px;
        margin-right: 10px;
    }
    .editDialog .bottomRight {
        background: url('/img/alohaSkin/overlay_crns.png') right -235px no-repeat;
    }
    .editDialog .bottomLeft {
    
    }*/
    .editDialog #fancybox-content .dialogContent, .editDialog #fancybox-content .detailList {
        width: 100%;
    }
    .editDialog textarea {
        width: 282px;
        height: 90px;
    }
    #fancybox-content .detailList, .tblActions {
        width: 497px;
    }
    #fancybox-title {
        position: absolute;
        top: 0;
        text-align: left;
        font-size: 1.25em;
        font-weight: bold;
        /*padding: 6px 10px;
        margin: 0;
        background: url('/img/alohaSkin/overlay_crns.png') left top repeat-x;*/
    }
    #fancybox-content .actionName, #fancybox-content .actionOperation {
        width: 180px;
    }
    .fieldList {
        width: 214px;
    }
    .fieldValue {
        width: 123px;
    }
    .advancedConditionsSection {
        margin-top: 10px;
    }
    .moveOptionsCell {
        text-align: center;
    }
    .moveOptionsCell div {
        padding: 1px 0;
    }
    .panelActionBtns {
        padding: 12px 0 6px;
        text-align: center;
    }
    .itemPicker {
        position: absolute;
    }
    
    /* tooltip style -- taken from http://stackoverflow.com/questions/5623072/ */
    .toolTip {
        position:absolute;
        z-index: 1000;
    }
    
    .toolTip p {
        padding:10px;
        margin: 0;
        background-color:#f9f9f9;
        border:solid 1px #a0c7ff;
        -moz-border-radius:5px;-ie-border-radius:5px;-webkit-border-radius:5px;-o-border-radius:5px;border-radius:5px;
    }
    
    .tailShadow {
        position:absolute;
        bottom:-8px;
        left:28px;
        width:0;height:0;
        border:solid 2px #fff;
        box-shadow:0 0 10px 1px #555;
    }
    .tail1 {
        position:absolute;
        bottom:-20px;
        left:20px;
        width:0;height:0;
        border-color:#a0c7ff transparent transparent transparent;
        border-width:10px;
        border-style:solid;
    }
    .tail2 {
        position:absolute;
        bottom:-18px;
        left:20px;
        width:0;height:0;
        border-color:#f9f9f9 transparent transparent transparent;
        border-width:10px;
        border-style:solid;
    }
    .top .tailShadow {
        top: -8px;
        bottom: inherit;
    }
    .top .tail1 {
        top: -20px;
        bottom: inherit;
        border-color: transparent transparent #a0c7ff transparent;
    }
    .top .tail2 {
        top: -18px;
        bottom: inherit;
        border-color: transparent transparent #f9f9f9 transparent;
    }
    .removeRow img {
        background-image: url('/img/alohaSkin/closeX.png');
        height: 20px;
        width: 20px;
    }
    .removeRow:hover img {
        background-position: 0 -20px;
    }
    .addRuleContainer {
        margin: 10px 0 0;
    }
</style>
<script type="text/javascript" src="{!URLFOR($Resource.Scripts, 'jQuery.js')}"></script>
<script type="text/javascript" src="{!URLFOR($Resource.Scripts, 'jQuery-UI.js')}"></script>
<script type="text/javascript" src="{!URLFOR($Resource.Scripts, 'jquery.drawloop.js')}"></script> 
<script type="text/javascript" src="{!URLFOR($Resource.Scripts, 'fancybox/jquery.fancybox-1.3.4_patch.js')}"></script>
<apex:includeScript value="{!URLFOR($Resource.Loop__Scripts, 'json2.js')}" /> 
<apex:includeScript value="{!URLFOR($Resource.Loop__Scripts, 'browserDetect-1.0.0.js')}" />
<script type="text/javascript">
    jQuery.noConflict();
    function sortHandle(event, ui) {
        jQuery('[id="ap:af:pb:fpbs:pbt:tb"] tr').each( function(i) {
            jQuery(this).find('[id$="fieldOrder"]').val(i);
        });
    }
    function sortOptions(a, b) {
        var o1 = 1.0 * a.getAttribute('data-order'),
            o2 = 1.0 * b.getAttribute('data-order');
        return o1 < o2
            ? -1
            : (o1 > o2
                ? 1
                : 0);
    };

    function usesListValues(fieldType) {
        return fieldType == 'Drop Down' || fieldType == 'Edit Drop Down' || fieldType == 'Radio'
                || fieldType == 'Radio Inline' || fieldType == 'Checkbox' || fieldType == 'Checkbox Inline';
    }
    // this is supposed to give focus to the text / textarea input immediately above or below the current one
    function keyUp(event) {
        if (event.keyCode == 38 || event.keyCode == 40) { // Up Arrow or Down Arrow keys
            if (event.target.type != 'textarea' || event.ctrlKey) {
                var target = jQuery(event.target);
                var targetId = target.prop('id').split(':').pop();
                var a = target.parent();
                while (!a.is('tr'))
                    a = a.parent();
                switch (event.keyCode) {
                    case 38:
                        a = a.prev();
                        break;
                    case 40:
                        a = a.next();
                        break;
                }
                a.find('[id$=":'+targetId+'"]').select();
            }
        }
    }
    function addOverlay(msg, disableFormButtons, selector) {
        if (!msg) msg = 'Processing...';
        removeOverlay();
        if (disableFormButtons) {
            disableAllFormButtonsButCancel();
        }
        var $container = jQuery(selector !== undefined ? selector : '.editPage .pbBody').css('position', 'relative');
        $container
            .append(
                jQuery('<div class="formLoading"><div class="loadingContent"></div></div>')
                    .find('.loadingContent')
                        .append('<img src="/img/loading.gif" alt="Processing..." width="16" height="16" title="Processing..."/>')
                        .append(
                            jQuery('<span class="loadingText"></span>')
                                .text(msg)
                        )
                    .end()
                    .css({
                        height: $container.height() - 2,
                        width: $container.width() - 2
                    })
            );
    }
    jQuery.fn.bounds = function() {
        var pos = this.offset();
        jQuery.extend(pos, {
            right: pos.left + this.width(),
            bottom: pos.top + this.height()
        });
        return pos;
    };
    function createTooltip(msg, options, callback) {
        var defaults = {
            orientation: 'bottom', // bottom
            'modal': true,
            anchor: 'side',
            selector: 'body',
            width: 'auto',
            height: 'auto',
            closeOnEscape: true
        };
        jQuery.extend(defaults, options);
        var orientation = defaults.orientation,
            selector = defaults.selector,
            anchor = defaults.anchor;
        
        var $origin = jQuery(selector);
        var bounds = $origin.bounds();
        
        var uid = 'tt_' + Math.round(Math.random() * 100000);
        var $tooltip = $tooltip = jQuery('<div class="toolTip">'
            + '<div class="tailShadow"></div>'
            + '<div class="tail1"></div>'
            + '<div class="tail2"></div>'
        + '</div>')
            .prop('id', uid)
            .prepend(
                jQuery('<p />')
                    .html(msg)
                    .css({
                        height: defaults.height,
                        width: defaults.width
                    })
            )
            .css({
                top: bounds.bottom + 10,
                left: bounds.left,
                'z-index': 10000
            });
        jQuery('body').append($tooltip);
        if (orientation == 'top') {
            $tooltip.addClass('top');
        }
        if (anchor == 'center') {
            var center = $tooltip.width() / 2;
            $tooltip
                .find('.tail1').css('left', center - 10).end()
                .find('.tail2').css('left', center - 10).end()
                .find('.tailShadow').css('left', center - 2);
        }
        if (defaults.modal) {
            var f = function(e) {
                if (!$origin.filter(e.target).length && !$origin.find(e.target).length && !jQuery(e.target).closest('.toolTip').length) {
                    $tooltip.remove();
                    jQuery(this).unbind('click', f);
                }
            };
            jQuery('body').bind('click', f);
        }
        if (defaults.closeOnEscape) {
            var f = function(e) {
                if (e.keyCode == 27) {
                    $tooltip.remove();
                    jQuery(this).unbind('keydown', f);
                }
            };
            jQuery('body').bind('keydown', f);
        }
        if (callback && callback instanceof Function) {
            callback.apply($tooltip);
        }
        return $tooltip;
    };
    function removeOverlay(enableButtons, selector) {
        if (enableButtons) {
            enableFormButtons();
        }
        jQuery(selector !== undefined ? selector : '.editPage .pbBody').find('.formLoading').remove();
    };
    function initializeActionsPanel(showRules) {
        jQuery('.addRule').unbind('click').click(function() {
            tabs.launchRuleDialog();
            return false;
        });
        jQuery('.actionEdit').unbind('click').click(function() {
            var uid = jQuery(this).closest('tr').find('.uid').val();
            tabs.launchRuleDialog(uid);
            return false;
        });
        jQuery('.actionDelete').unbind('click').click(function() {
            var $tr = jQuery(this).closest('tr');
            tabs.deletedRuleIds.push($tr.find('.uid').val());
            $tr.remove();
            tabs.initializeRulesTable();
            return false;
        });
        if (showRules) {
            enableFormButtons();
            tabs.showRules();
        }
    };
    function initializeTabs(options) {
        var vfId = options['selector'],
            startIndex = options['currentStepIndex'],
            requestToLoadFields = options['requestLoadFields'],
            actions = options['actions'],
            showRules = options['showRules'];
        enableFormButtons();
        var selector = '[id$="' + vfId + '"]';
        window.tabs = new TabManager(selector, startIndex);
        window.actions = actions;
        for (var i = 0; i < tabs.tabs.length; i++) {
            tabs.tabs[i].init();
        }
        
        if (showRules) {
            tabs.showRules();
        } else {
            tabs.showForm();
        }
        tabs.initializeRulesTable();

        if (requestToLoadFields) {
            jQuery(function() {
                tabs.loadAdditionalFields();
            });
        } else {
            removeOverlay();
           }
    };
    function toggleAddDaysView(select) {
        jQuery(select).closest('td').find('.addDaysView').toggleClass('hidden', select.value != 'Today+');
    };
    function enableFormButtons() {
        $getFormButtons().addClass('btn').removeClass('btnDisabled').each(function(i, e) {
            var origText = jQuery(this).data('origText');
            if (origText) {
                this.value = origText;
            }
        });
    };
    function disableFormButtons(replacementText) {
        $getFormButtons().addClass('btnDisabled').removeClass('btn').each(function(i, e) {
            if (replacementText !== undefined) {
                jQuery(this).data('origText', this.value).val(replacementText);
            }
        });
    };
    function disableAllFormButtonsButCancel() {
        $getFormButtons().filter(':not(.btnCancel)').addClass('btnDisabled').removeClass('btn');
    };
    function $getFormButtons() {
        return jQuery('.pbButton input, .pbButtonb input');
    };
    function getTabManager() {
        return window.tabs;
    }
    function TabManager(selector, startIndex) {
        this.$elem = jQuery(selector),
        this.$tabs = this.$elem.find('.tabs'),
        this.$allContent = this.$elem.find('.content');
        this.tabs = [];
        this.stepEmptyMessage = 'No fields exist for this step.';
        this.ignoredStepId = '-1';
        this.deletedFieldIds = [];
        this.deletedRuleIds = [];
        //this.$contentTemplate = this.$allContent.children('div:eq(0)').clone(true).removeClass().prop('id');
        var tabManager = this;
        this.$tabs.find('.tab').each(function(i, e) {
            tabManager.tabs.push(new Tab(i, tabManager));
        });
        
        // Add messages for empty steps
        for (var i = 0; i < this.tabs.length; i++) {
            this.tabs[i].setStepEmptyMessage(!this.tabs[i].hasRows());
        }

        this.goToIndex(startIndex || 0);
    };
    TabManager.prototype.initializeRulesTable = function() {
        var $tbody = this.$getActionsPanel().find('.list tbody');
        if (!$tbody.find('> tr').length) {
            $tbody.append('<tr><td colspan="3" style="text-align: center;">There are currently no rules for this form.</td></tr>');
        }
    };
    TabManager.prototype.goTo = function(tabId) {
        var index = this.getIndexByUniqueId(tabId);
        if (index > -1) {
            this.goToIndex(index);
        }
    };
    TabManager.prototype.goToIndex = function(index) {
        var i = index * 1;
        if (i < 0 || i >= this.tabs.length) i = 0;
        this.$tabs.find('.tab').removeClass('active').filter(':eq(' + i + ')').addClass('active');
        this.$allContent.children('div').removeClass('active').filter(':eq(' + i + ')').addClass('active');
        this.activeIndex = i;
    };
    TabManager.prototype.getTabByUniqueId = function(tabId) {
        var index = this.getIndexByUniqueId(tabId);
        return index > -1 ? this.tabs[index] : null;
    };
    TabManager.prototype.getIndexByUniqueId = function(tabId) {
        for (var i = 0; i < this.tabs.length; i++) {
            if (this.tabs[i].getId() == tabId)
                return i;
        }
        return -1;
    };
    TabManager.prototype.getTabIndex = function(tab) {
        return jQuery(this.tabs).index(tab);
    }
    TabManager.prototype.getCurrentStepId = function() {
        var tab = this.getActiveTab();
        return tab ? tab.getId() : null;
    };
    TabManager.prototype.getActiveTab = function() {
        return this.tabs[this.activeIndex];
    };
    TabManager.prototype.getIgnoredTab = function() {
        return this.getTabByUniqueId(this.ignoredStepId);
    };
    TabManager.prototype.getSyncData = function() {
        var steps = [];
        for (var i = 0; i < tabs.tabs.length; i++) {
            steps.push({
                uid: tabs.tabs[i].getId(),
                name: tabs.tabs[i].getName(),
                fieldIds: tabs.tabs[i].getFieldIds()
            });
        }
        return {
            steps: steps,
            deletedFieldIds: this.deletedFieldIds,
            deletedRuleIds: this.deletedRuleIds,
            showRules: !this.$getActionsPanel().hasClass('invisible')
        };
    };
    TabManager.prototype.addStep = function(name) {
        log('adding step name: ' + name);
        var updateInfo = tabs.getSyncData();
        addOverlay('Adding step...', true);
        addStep(name, JSON.stringify(updateInfo));
        return false;
    };
    TabManager.prototype.deleteStep = function(tab) {
        var updateInfo = tabs.getSyncData();
        addOverlay('Deleting step...', true);
        deleteStep(tab.getId(), JSON.stringify(updateInfo));
        return false;
    };
    TabManager.prototype.performWithSelected = function(operation) {
        var tab = this.getActiveTab();
        if (tab == null) {
            return;
        }
        var startStepId = tab.getId(),
            $selected = tab.$getSelected();
        if ($selected.length == 0) {
            alert('No fields selected.');
            tab.$getMoveFieldsDropdown().val('');
            return false;
        }
        return operation(tab, $selected);
    };
    TabManager.prototype.animateShowRows = function($arr, callback) {
           $arr.fadeTo(250, 1, function() {
               jQuery(this).show();
               callback && callback.apply(this);
           });    
    };
    TabManager.prototype.animateHideRows = function($arr, callback) {
        var pauseTime = 250,
            t = $arr.length,
            n = 0;
           $arr.fadeTo(pauseTime, 0, function() {
               n++;
               jQuery(this).hide();
               if (n == t) {
                   return callback && callback.apply(this);
               }
           });
    };
    TabManager.prototype.deleteSelected = function() {
        return this.performWithSelected(function(tab, $selected) {
            if (confirm('Are you sure?')) {
                tab.tabManager.animateHideRows($selected, function() {
                    $selected.each(function(i, e) {
                        var row = this,
                            recordId = jQuery(row).addClass('deletedField').find('.select').val();
                           tab.tabManager.deletedFieldIds.push(recordId);
                       });
                });
                tab.setSelectAllCheckbox(false);
            }
        });
    };
    TabManager.prototype.ignoreSelected = function() {
        var endTab = this.getIgnoredTab();
        return this.performWithSelected(function(tab, $selected) {
            tab.removeRows($selected, function($rows) {
                $rows.find('.select').prop('checked', false);
                endTab.addRows($rows, null);
            });
            tab.setSelectAllCheckbox(false);
            tab.$getMoveFieldsDropdown().val('');
        });
    };
    TabManager.prototype.moveSelected = function(endStepId) {
        if (!endStepId) {
            return false;
        }
           var endTab = this.getTabByUniqueId(endStepId);
        this.performWithSelected(function(tab, $selected) {
            tab.removeRows($selected, function($rows) {;
                $rows.find('.select').prop('checked', false);
                endTab.addRows($rows);
            });
            tab.setSelectAllCheckbox(false);
            tab.$getMoveFieldsDropdown().val('');
        });
    };
    TabManager.prototype.loadAdditionalFields = function(msg) {
        var updateInfo = tabs.getSyncData();
        addOverlay(msg || 'Retrieving {!$ObjectType.Loop__DDP__c.label} fields...', true);
        loadAdditionalFields(tabs.getCurrentStepId(), JSON.stringify(updateInfo));
    };
    TabManager.prototype.addNewFields = function(stepId, fields) {
        var updateInfo = tabs.getSyncData();
        addOverlay('Processing...', true);
        addFields(tabs.getCurrentStepId(), JSON.stringify(fields), JSON.stringify(updateInfo));
    };
    TabManager.prototype.showRules = function() {
        jQuery('.btnActions').val('View Form');
        jQuery('[id$=":tabs"]').addClass('invisible');
        this.$getActionsPanel().removeClass('invisible');
    };
    TabManager.prototype.showForm = function() {
        jQuery('.btnActions').val('View Rules');
        this.$getActionsPanel().addClass('invisible');
        jQuery('[id$=":tabs"]').removeClass('invisible');
    };
    TabManager.prototype._generateActionDialogHtml = function(action) {
        var $content = jQuery('[id$=":panelAddAction"]')
            .clone()
            .prop('id', '')
            .addClass('dialogContent')
            .removeClass('invisible')
            .css('visibility', 'hidden');
        var noOptStyles = true || (Utils.BrowserDetect.browser == 'IE' && Utils.BrowserDetect.version < 7)
            || (Utils.BrowserDetect.browser == 'Chrome' && Utils.BrowserDetect.OS == 'Mac');
            
        // get fields
        var $steps = jQuery(this.tabs).map(function(i, e) {
            return {
                    uid: e.getId(),
                    name: e.getName(),
                    isIgnored: e.isIgnored(),
                    $fields: e.getContent().find('.tblFields .dataRow').map(function(i, e1) {
                        var type = jQuery(e1).find('.fldFieldType').val(),
                            name = null;
                        if (type) {
                            name = jQuery(e1).find('.fieldName').val();
                        } else {
                            name = jQuery.trim(jQuery(e1).find('label.text').text());
                            if (name.length > 36) name = name.substring(0,33) + '...';
                        }
                        //if (!type) return null; // ignore title / note fields
                        return {
                            uid: jQuery(e1).find('.select').val(),
                            name: name,
                            tagname: jQuery(e1).find('[id$=":fieldTag"]').text(),
                            type: type
                        };
                    })
            };
        });
        // get Filter fields
        var $filterOptions = $steps.map(function(i, e) {
            return jQuery('<optgroup />')
                .prop('label', e.name)
                .append(e.$fields
                    .filter(function(i) { return !!this.type; })
                    .map(function(i, e1) {
                        return jQuery('<option />')
                            .text(e1.name)
                            .val(e1.tagname)
                            //.val(e1.uid)
                            //.prop('data-tagname', e1.tagname)
                            .prop('disabled', e.isIgnored)
                            .get();
                }))
                .get();
        })
            .before('<option value="">--None--</option>');
            
        // get fields for 'select' multipicklist
        var itemIndex = 0;
        var $picklistOptions = $steps.map(function(i, e) {
            if (e.isIgnored) return null;
            var item = jQuery('<option />')
                .text(
                    noOptStyles
                        ? '--' + e.name + '--'
                        : e.name)
                .val(e.uid)
                .addClass('optStep')
                .prop('data-order', itemIndex)
                .prop('data-uid', e.uid)
                .add(e.$fields.map(function(i, e1) {
                    itemIndex++;
                    var $opt = jQuery('<option />')
                        .text(e1.name)
                        .val(e1.uid)
                        .addClass('optField')
                        .prop('data-order', itemIndex)
                        .prop('data-step', e.uid);
                    if (noOptStyles) {
                        $opt.html('&nbsp;&nbsp;&nbsp;&nbsp;' + $opt.html());
                    }
                    return $opt.get();
                }))
                .get();
            itemIndex++;
            return item;
        });
        // update filter options
        $content.find('.fieldList').html('').append($filterOptions.clone()).prepend('<option value="">--None--</option>').val('');
        // update field selection options
        // $content.find('.availableFields').html('').append($picklistOptions);
        var $stepPicker = $content.find('.itemPicker');
        $stepPicker.clone().addClass('fieldPicker').appendTo($stepPicker.parent())
            .find('.available').html('').append($steps.map(function(i, e) {
                return jQuery('<optgroup />')
                    .attr('label', e.name)
                    .attr('data-order', i + 1)
                    .append(e.$fields.map(function(j, e1) {
                        return jQuery('<option />')
                            .val(e1.uid)
                            .text(e1.name)
                            .attr('disabled', e.isIgnored)
                            .attr('data-order', (i + 1) + ((j + 1) * 0.0001))
                            .get();
                    }))
                    .get();
            }));
        $stepPicker
            .addClass('stepPicker')
            .find('.available').html('').append($steps.map(function(i, e) {
                if (e.isIgnored) return null;
                return jQuery('<option />')
                    .val(e.uid)
                    .attr('data-order', i)
                    .text(e.name)
                    .get();
            }));
        
        return jQuery('<p />')
            .append($content)
            .html();
    };
    TabManager.prototype.$getActionsPanel = function() {
        return jQuery('[id$=":panelActions"]');
    };
    TabManager.prototype.getActionInfoFromDialog = function(uid) {
        var $content = jQuery('#fancybox-content > div');
        
        var conditions = $content.find('.fieldList').map(function(i, e) {
            if (!this.value)return null;
            var $this = jQuery(this);
            return {
                'operand1': '<<' + this.value + '>>',
                'operator': jQuery(this).closest('tr').find('.operator').val(),
                'operand2': jQuery(this).closest('tr').find('.fieldValue').val()
            };
            //return '(<<' + this.value + '>> ' 
            //    + jQuery(this).closest('tr').find('.operator').val() + ' ' 
            //    + jQuery(this).closest('tr').find('.fieldValue').val() + ')';
        }).get();
        
        
        var actions = $content.find('.tblActions .addActionRow').map(function(i, e) {
            var dataStr = jQuery(e).find('.operationData').val() || '{}';
            return {
                operationType: jQuery(e).find('.operationType').val(),
                operationData: JSON.parse(dataStr)
            };
        }).get();
        /*var operationData = {
            stepIds: $options.filter('.optStep').map(function(i, e) { return e.value; }).get(),
            fieldIds: $options.filter('.optField').map(function(i, e) { return e.value; }).get()
        };*/
        return {
            uid: uid,
            name: $content.find('.actionName').val(),
            operation: $content.find('.actionOperation').val(),
            conditions: conditions,
            advancedConditions: $content.find('.advancedConditions').val(),
            actions: actions
        };
    };
    TabManager.prototype.getActionInfoFromRow = function(uid) {
        var $row = this.$getActionsPanel().find('tr .uid[value="' + uid + '"]').closest('tr');
        if (!$row.length) {
            return {};
        }
        return {
            uid: uid,
            name: $row.find('.actionName').text(),
            conditions: JSON.parse($row.find('.actionConditions').val() || '[]'),
            advancedConditions: $row.find('.advancedConditions').val(),
            actions: JSON.parse($row.find('.actionOperationData').text() || '[]')
        };
    };
    /*
    // Old-Style condition formatting
    TabManager.prototype.parseActionConditions = function(str) {
        var parts = str.split(';');
        var conditions = [],
            operators = jQuery('.operator:eq(0) option').map(function(i, e) {
                return e.value ? e.value : null;
            }).get(),
            matcher = /\(<<([^<>\s]+)>>\s(.*?)\)[\s]*$/;
        for (var i = 0; i < parts.length; i++) {
            if (!matcher.test(parts[i])) {
                throw 'condition does not match correct format: ' + parts[i];
            }
            var match = parts[i].match(matcher),
                tagname = match[1],
                rest = match[2],
                operator = null,
                value = null;
            for (var j = 0; j < operators.length; j++) {
                if (rest.indexOf(operators[j]) === 0) {
                    operator = operators[j];
                    value = rest.substring(operator.length + 1);
                    break;
                }
            }
            conditions.push({
                operand1: tagname,
                operator: operator,
                operand2: value
            });
        }
        return conditions;
    };*/
    TabManager.prototype.launchPicker = function(view, content, selected, fAdd, fRemove, oncomplete) {
        var $tooltip = createTooltip(content, { selector: view, orientation: 'top' });
        $tooltip.find('.btnAdd').unbind('click').click(fAdd);
        $tooltip.find('.btnRemove').unbind('click').click(fRemove);
        $tooltip.find('.btnItemPicker').unbind('click').click(oncomplete);
        var selectedSelector = jQuery(selected).map(function(i, e) {
            return 'option[value="' + e + '"]';
        }).get().join(',');
        $tooltip.find('.available').find(selectedSelector).prop('selected', true);
        fAdd.apply($tooltip.find('.btnAdd').get(0));
        return $tooltip;
    };
    TabManager.prototype.launchRuleDialog = function(uid) {
        var manager = this;
        var rule = uid ? this.getActionInfoFromRow(uid) : {};
        jQuery.fancybox(this._generateActionDialogHtml(), { 
            showCloseButton: false,
            overlayColor: '#000',
            overlayOpacity: 0.6,
            height: 'auto',
            width: 540,
            autoDimensions: false,
            title: uid ? 'Update Rule' : 'Add Rule',
            titlePosition: 'inside',
            titleFormat: function() {
                jQuery('#fancybox-title').append(jQuery('<div id="fancybox-title-inside" />').text(uid ? 'Update Rule' : 'Add Rule'));
            },
            onComplete: function() {
                // init fancybox elements
                jQuery('#fancybox-content').css('height', 'auto');
                var $fboxClose = jQuery('#fancybox-outer .dialogClose');
                if (!$fboxClose.length) {
                    $fboxClose = jQuery('<a href="javascript:;" class="dialogClose">&nbsp;</a>').appendTo('#fancybox-outer');
                }
                $fboxClose.unbind('mouseenter mouseleave').hover(function() {
                    jQuery(this).removeClass('dialogClose').addClass('dialogCloseOn');
                }, function() {
                    jQuery(this).addClass('dialogClose').removeClass('dialogCloseOn');
                })
                    .unbind('click').click(function() { jQuery.fancybox.close(); });
                jQuery('#fancybox-title').show();
                jQuery('#fancybox-wrap').addClass('editDialog');
                var $content = jQuery('#fancybox-content > div');
                
                function addSelected() {
                    var $picker = jQuery(this).closest('table'),
                        $available = $picker.find('.available'),
                        $selected = $picker.find('.selected'),
                        $clonedSelected = $selected.find('option[value!=""]').attr('selected', false).clone(),
                        options = $available.find(':selected[value!=""]:not(:disabled)')
                            .add($clonedSelected)
                            .get();
                    options.sort(sortOptions);
                    $selected.html('').append(options).focus();
                    if ($selected.find('option').length == 0) {
                        $selected.append('<option value="">--None--</option>');
                    }
                    if (!$available.find('optgroup').length && !$available.find('option').length) {
                        $available.append('<option value="">--None--</option>');
                    }
                };
                function removeSelected() {
                    var $picker = jQuery(this).closest('table'),
                        $available = $picker.find('.available'),
                        $selected = $picker.find('.selected'),
                        $options = $selected.find(':selected[value!=""]')
                            .add($available.find('option[value!=""]').attr('selected', false));
                    var $groups = $available.find('optgroup');
                    if ($groups.length > 0) {
                        $groups.each(function(i, e) {
                            // sort each group individually
                            var gOrder = e.getAttribute('data-order') * 1.0;
                            var $opts = $options.filter(function(j, e1) {
                                var order = e1.getAttribute('data-order') * 1.0;
                                return order > gOrder && order < (gOrder + 1);
                            });
                            var opts = $opts.clone().get();
                            opts.sort(sortOptions);
                            jQuery(e).html('').append(opts);
                        });
                    } else {
                        $options.sort(sortOptions);
                        var cloned = $options.clone().get();
                        $available.html('').append(cloned);
                    }
                    $available.focus();
                    $selected.find(':selected[value!=""]').remove();
                    if ($selected.find('option').length == 0) {
                        $selected.append('<option value="">--None--</option>');
                    }
                };
                // set rule values
                if (rule.conditions) {
                    //var conditions = manager.parseActionConditions(rule.conditions);
                    for (var i = 0; i < rule.conditions.length; i++) {
                        var $row = $content.find('.tblFilter tr:eq(' + (i + 1) + ')');
                        var tagname = (rule.conditions[i].operand1 || '').replace('<<', '').replace('>>', '');
                        $row.find('.fieldList').val(tagname);
                        $row.find('.operator').val(rule.conditions[i].operator);
                        $row.find('.fieldValue').val(rule.conditions[i].operand2);
                    }
                }
                if (rule.advancedConditions) {
                    $content.find('.advancedConditions').val(rule.advancedConditions);
                }
                $content.find('.btnActionDone').unbind('click').click(function() {
                    var info = manager.getActionInfoFromDialog(uid);
                    var syncData = manager.getSyncData();
                    jQuery.fancybox.close();
                    addOverlay('Updating...', true, tabs.$getActionsPanel().find('.rulesContainer'));
                    addUpdateAction(JSON.stringify(info), JSON.stringify(syncData));
                });
                $content.find('.actionClose,.btnActionCancel').unbind('click').click(function() {
                    jQuery.fancybox.close();
                });
                $content.find('.btnAdd').unbind('click').click(addSelected);
                $content.find('.btnRemove').unbind('click').click(removeSelected);
                
                $content.find('.operationType').unbind('change').change(function() {
                    var $row = jQuery(this).closest('tr');
                    if (this.value == 'DisplayErrorMessage') {
                        $row.find('.addStepsSection').hide();
                        $row.find('.addMessageSection').show();
                    } else {
                        $row.find('.addStepsSection').show();
                        $row.find('.addMessageSection').hide();
                    }
                });
                $content.find('.addSteps').unbind('click').click(function() {
                    var $a = jQuery(this);
                    var $actionData = $a.closest('.addActionRow').find('.operationData');
                    var content = jQuery('#fancybox-content').find('.stepPicker').html();
                    var data = $actionData.val() ? JSON.parse($actionData.val()) : { };
                    var selected = data.stepIds || [];
                    var $tooltip = tabs.launchPicker(this, content, selected, addSelected, removeSelected, function() {
                        var data = $actionData.val() ? JSON.parse($actionData.val()) : { };
                        var selected = $tooltip.find('.selected option[value!=""]').map(function(i, e) {
                            return e.value;
                        }).get();
                        data.stepIds = selected;
                        $actionData.val(JSON.stringify(data));
                        $a.text(data.stepIds.length + ' Step(s)');
                        $tooltip.remove();
                    });
                });
                $content.find('.addFields').unbind('click').click(function() {
                    var $a = jQuery(this);
                    var $actionData = jQuery(this).closest('.addActionRow').find('.operationData');
                    var content = jQuery('#fancybox-content').find('.fieldPicker').html();
                    var data = $actionData.val() ? JSON.parse($actionData.val()) : { };
                    var selected = data.fieldIds || [];
                    var $tooltip = tabs.launchPicker(this, content, selected, addSelected, removeSelected, function() {
                        var data = $actionData.val() ? JSON.parse($actionData.val()) : { };
                        var selected = $tooltip.find('.selected option[value!=""]').map(function(i, e) {
                            return e.value;
                        }).get();
                        data.fieldIds = selected;
                        $actionData.val(JSON.stringify(data));
                        $a.text(data.fieldIds.length + ' Field(s)');
                        $tooltip.remove();
                    });
                });
                $content.find('.addMessage').unbind('click').click(function() {
                    var $a = jQuery(this),
                        $row = $a.closest('.addActionRow'),
                        $actionData = $row.find('.operationData'),
                        $tooltipContent = jQuery('<div><table><tr><th>Message</th></tr><tr><td><textarea class="messageText" maxlength="255"></textarea></td></tr></table></div>'),
                        data = $actionData.val() ? JSON.parse($actionData.val()) : { };
                    
                    // add OK / Cancel buttons
                    $tooltipContent.append('<div><input type="submit" class="btn btnOk" value="OK" /> <input type="submit" class="btn btnCancel" value="Cancel" /></div>');
                    var $tooltip = createTooltip($tooltipContent.html(), { selector: $a, orientation: 'top' }, function() {
                        var $tooltip = this;
                        // set default value
                        $tooltip.find('.messageText').val(data.message || 'Invalid Entry').focus();
                        $tooltip.find('.btnOk').click(function() {
                            data.message = $tooltip.find('.messageText').val() || 'Invalid Entry';
                            delete data.stepIds;
                            $actionData.val(JSON.stringify(data));
                            $a.text(data.message);
                            $tooltip.remove();
                        });
                        $tooltip.find('.btnCancel').click(function() {
                            $tooltip.remove();
                        });
                    });
                });
                $content.find('.removeRow').unbind('click').click(function() {
                    var $tbody = jQuery(this).closest('tbody');
                    jQuery(this).closest('tr').remove();
                    $tbody.find('td:first-child').each(function(i, e) {
                        jQuery(e).text((i + 1) + '.');
                    });
                });
                var $newRow = $content.find('.addActionRow').clone(true);
                $content.find('.addActionRow').find('.addMessageSection').hide();
                var addActionRow = function() {
                    var $tmp = $newRow.clone(true);
                    $tmp.find('td:first').text($content.find('.tblActions tbody tr').length + '.');
                    $tmp.find('.addMessageSection').hide();
                    $content.find('.tblActions tbody').append($tmp);
                };
                jQuery('.addAction').unbind('click').click(function() {
                    addActionRow();
                    return false;
                });
                if (rule.actions && rule.actions.length) {
                    var $table = $content.find('.tblActions');
                    for (var i = 0; i < rule.actions.length; i++) {
                        if (i > 0) {
                            addActionRow();
                        }
                        var $row = $table.find('.addActionRow:last'),
                            action = rule.actions[i];
                        $row.find('.operationType').val(action.operationType).change();
                        $row.find('.operationData').val(JSON.stringify(action.operationData));
                        $row.find('.addSteps').text((action.operationData.stepIds || []).length + ' Step(s)');
                        $row.find('.addFields').text((action.operationData.fieldIds || []).length + ' Field(s)');
                        $row.find('.addMessage').text(action.operationData.message || 'Invalid Entry');
                        if (action.operationType == 'DisplayErrorMessage') {
                            $row.find('.addStepsSection').hide();
                        } else {
                            $row.find('.addMessageSection').hide();
                        }
                    }
                }
                $content.children().css('visibility', 'visible');
            } 
        });
    };
    TabManager.prototype._generateMessageDialogHtml = function() {
        return jQuery('[id$=":panelEditMessage"]').clone().html();
    };
    TabManager.prototype.launchDialog = function(options) {
        var opts = { };
        jQuery.extend(opts, options);
        var autoDims = opts.height === undefined && opts.width === undefined;
        var $html = jQuery('<div><div /></div>')
            .append(opts.html)
            .append('<div class="panelActionBtns"><input type="submit" value="OK" class="btn btnActionDone"/><input type="submit" value="Cancel" class="btn btnActionCancel"/></div>');
        jQuery.fancybox($html.html(), { 
            showCloseButton: false,
            overlayColor: '#000',
            overlayOpacity: 0.6,
            width: opts.width,
            height: opts.height,
            autoDimensions: autoDims,
            title: opts.title,
            titlePosition: 'inside',
            titleFormat: function() {
                jQuery('#fancybox-title').append(
                    jQuery('<div id="fancybox-title-inside" />')
                        .text(opts.title));
            },
            onComplete: function() {
                // init fancybox elements
                jQuery('#fancybox-wrap').addClass('editDialog');
                var $fboxClose = jQuery('#fancybox-outer .dialogClose');
                if (!$fboxClose.length) {
                    $fboxClose = jQuery('<a href="javascript:;" class="dialogClose">&nbsp;</a>').appendTo('#fancybox-outer');
                }
                $fboxClose.unbind('mouseenter mouseleave').hover(function() {
                    jQuery(this).removeClass('dialogClose').addClass('dialogCloseOn');
                }, function() {
                    jQuery(this).addClass('dialogClose').removeClass('dialogCloseOn');
                })
                    .unbind('click').click(function() { jQuery.fancybox.close(); });
                jQuery('#fancybox-title').show();
                var $content = jQuery('#fancybox-content > div');
                $content.find('.btnActionDone').unbind('click').bind('click', function() {
                    if (opts.onsave.call(this, $content)) {
                        jQuery.fancybox.close();
                    }
                    return false;
                
                });
                $content.find('.btnActionCancel').unbind('click').bind('click', function() {
                    if (opts.oncancel) {
                        if (opts.oncancel.call(this, $content)) {
                            jQuery.fancybox.close();
                        }
                     } else {
                        jQuery.fancybox.close();
                    }
                    return false; 
                });
                opts.onload && opts.onload.call(this, $content);
            }
           });

    };
    TabManager.prototype.launchEditTitleDialog = function(uid) {
        return this.launchEditDialog(uid, 'Title');
    };
    TabManager.prototype.launchEditNoteDialog = function(uid) {
        return this.launchEditDialog(uid, 'Note');
    };
    TabManager.prototype.launchEditDialog = function(uid, type) {
        var manager = this;
        var $row = uid ? this.$getFieldRow(uid) : null;
        var isNewRow = !$row;
        var text = '';
        if ($row) {
            text = $row.find('[id$=":textValue"]').val();
        }
        var $html = jQuery('<div><div></div></div>')
            .find('div')
                .append('<div><textarea class="messageText"></textarea></div>')
            .end();
        this.launchDialog({
            title: (isNewRow ? 'Add ' : 'Edit ') + type,
            html: $html.html(),
            height: 150,
            width: 292,
            onload: function($content) {
                $content
                    .find('.messageText')
                    .val(text)
                    .unbind('keyup blur')
                    .bind('keyup blur', function(event) {
                        if (this.value.length > 255) {
                            this.value = this.value.substring(0, 255);
                        }
                    })
                    .select()
                    .focus();
            },
            onsave: function($content) {
                var text = $content.find('.messageText').val();
                if (isNewRow) {
                    manager.addNewFields(manager.getCurrentStepId(), [{
                        fieldType: type,
                        defaultValue: text
                    }]);
                } else {
                    $row.find('[id$=":textValue"]').val(text);
                    $row.find('.text').text(text);
                }
                return true;
            }
        });
    };
    TabManager.prototype.$getFieldRow = function(uid) {
        return this.$allContent.find('.dataRow .select[value="' + uid + '"]').closest('.dataRow');
    };
    TabManager.prototype.getAvailableFieldOptions = function() {
        return jQuery(this.tabs).map(function(i, e) {
            return e.isIgnored() ? null : jQuery({
                    uid: e.getId(),
                    name: e.getName(),
                    isStep: true
                })
                    .add(this.getContent().find('.tblFields .dataRow').map(function(i, e) {
                        return {
                            uid: jQuery(e).find('.select').val(), 
                            name: jQuery(e).find('.fieldName').val() ,
                            isStep: false
                        }
                    }))
                    .get();
        });
    };
    /*TabManager.prototype.generate$tab = function(name) {
        return jQuery('<li class="tab"></li>')
            .append(
                jQuery('<div class="outer"><div></div></div>')
                    .find('div')
                        .append(
                            jQuery('<span class="pointer name"></span>')
                                .text(name)
                        )
                        .append('<img src="https://apps.drawloop.com/images/icons/platform/edit.gif" alt="edit" class="pointer edit" />')
                        .append('<img src="https://apps.drawloop.com/images/icons/platform/cross.png" alt="delete" class="delete" />')
            );
    };*/
    function Tab(index, tabManager) {
        this.index = index;
        this.tabManager = tabManager;
        this.init();
    };
    Tab.prototype.getItem = function() {
        return this.tabManager.$tabs.find('.tab:eq(' + this.index + ')');
    };
    Tab.prototype.getContent = function() {
        return this.tabManager.$allContent.children('div:eq(' + this.index + ')');    
    };
    Tab.prototype.init = function() {
        this.initItem();
        this.initContent();
    };
    Tab.prototype.initItem = function() {
        // init event handlers
        var tab = this;
        this.getItem().unbind('click').click(function() {
            tab.activate();
        });
        this.getItem().find('.edit').unbind('click').click(function() {
            var newName = prompt('Step Name', tab.getName());
            if (newName) {
                var oldName = tab.getName();
                tab.setName(newName);
                for (var i = 0; i < tab.tabManager.tabs.length; i++) { 
                    tab.tabManager.tabs[i].$getMoveFieldsDropdown().find('option')
                        .filter(function(i, e) {
                            return e.value == tab.getId() && jQuery(e).text() == oldName;
                        }).text(newName);
                }
            }
            return false;
        });
        this.getItem().find('.delete').unbind('click').click(function() {
            if (confirm('Are you sure?')) {
                return tabs.deleteStep(tab);
                //tab.tabManager.deleteStep(tab);
            }
            return false;
        });
    };
    Tab.prototype.initContent = function() {
        var $tabScope = this.getContent();
        // Setup buttons / options
        jQuery('.selectall', $tabScope).unbind('click').click(function() {
            jQuery(this).closest('table').find(':checkbox.select').attr('checked', jQuery(this).prop('checked'));
        });
        jQuery('.select', $tabScope).shiftClickify();
        jQuery('.selectMoveFields', $tabScope).unbind('change').change(function() {
            tabs.moveSelected(this.value);
        });
        jQuery('.btnIgnore', $tabScope).unbind('click').click(function() {
            tabs.ignoreSelected();
            return false;
        });
        jQuery('.btnAddTitle', $tabScope).unbind('click').click(function() {
            tabs.launchEditTitleDialog();
            return false;
        });
        jQuery('.btnAddNote', $tabScope).unbind('click').click(function() {
            tabs.launchEditNoteDialog();
            return false;
        });
        jQuery('.btnDelete', $tabScope).unbind('click').click(function() {
            tabs.deleteSelected();
            return false;
        });
        jQuery('.editText', $tabScope).unbind('click').click(function() {
            var uid = jQuery(this).closest('tr').find('.select').val(),
                type = jQuery(this).closest('td').find('[id$=":textType"]').val();
            tabs.launchEditDialog(uid, type);
        });
        jQuery('.fldFieldType', $tabScope).unbind('change').change(function() {
            jQuery(this).closest('tr').find('.conListValues').toggleClass('hidden', !usesListValues(this.value));
        }).change();
        jQuery('.lookupIcon', $tabScope).unbind('mouseenter mouseleave').hover(function() {
            jQuery(this).addClass('lookupIconOn');
        }, function() {
            jQuery(this).removeClass('lookupIconOn');
        }).unbind('click').click(function() {
            jQuery(this).closest('.defaultspan')
                .addClass('sfDefaultValueOn')
                .find('[id$=":usesSalesforceDefaultValue"]').val('true');
               var $input = jQuery(this).closest('.defaultspan').find('.defaultView input');
               $input.data('prevValue', $input.val());
        });
        jQuery('.hideSFDefaultValueView', $tabScope).unbind('click').click(function() {
            jQuery(this).closest('.defaultspan')
                .removeClass('sfDefaultValueOn')
                .find('[id$=":usesSalesforceDefaultValue"]').val('false');
               var $input = jQuery(this).closest('.defaultspan').find('.defaultView input');
               $input.val($input.data('prevValue') || '');
        });
        jQuery('.tblFields :text,.tblFields select,.tblFields :checkbox', $tabScope).unbind('keydown').keydown(function(e) {
            return e.keyCode != 13; // do not submit form when 'Enter' key is pressed
        });
        log('initContent');
        
        // Setup sortable rows
        jQuery('.tblFields tbody', $tabScope)
            .sortable({
                   axis: 'y', 
                   items: 'tr',
                   cursor: 'move',
                helper: function(e, tr) {
                  var $originals = tr.children();
                  var $helper = tr.clone();
                  $helper.children().each(function(index)
                  {
                    // Set helper cell sizes to match the original sizes
                    jQuery(this).width($originals.eq(index).width());
                  }).css('background-color', '#FFF');
                  return $helper;
                },
                start: function(event, ui) {
                    if (Utils.BrowserDetect.browser == 'Explorer' && Utils.BrowserDetect.version < 9) {
                        ui.placeholder.height(49);
                    }
                }
            })
            //.disableSelection()
            .unbind('sortstop').bind('sortstop', sortHandle);
    };
    Tab.prototype.getId = function() {
        return this.getItem().find('.uniqueId').val();
    };
    Tab.prototype.getName = function() {
        return this.getItem().find('.name').text();
    };
    Tab.prototype.setName = function(name) {
        this.getItem().find('.name').text(name);
    };
    Tab.prototype.getFieldIds = function() {
        return jQuery.makeArray(this.$getFieldRows().not('.deletedField').find(':checkbox.select').map(function(i, e) { return this.value; }));
    };
    Tab.prototype.$getSelected = function() {
        return this.$getFieldRows().not('.deletedField').find(':checkbox.select:checked').closest('tr');
    };
    Tab.prototype.$getFieldRows = function() {
        return this.getContent().find('.list tr');
    }; 
    Tab.prototype.$getTable = function() {
        return this.getContent().find('.list');
    };
    Tab.prototype.setStepEmptyMessage = function(display) {
        if (display && this.getContent().find('.msgStepEmpty').length == 0) {
            this.getContent().find('.tblFields').after(
                jQuery('<div class="msgStepEmpty"></div>')
                    .text(this.tabManager.stepEmptyMessage)
            );
        } else {
            this.getContent().find('.msgStepEmpty').remove();
        }
    };
    Tab.prototype.isIgnored = function() {
        return this.getId() == this.tabManager.ignoredStepId;
    };
    Tab.prototype.hasRows = function() {
        return this.getContent().find('.tblFields tbody tr').length > 0;
    };
    Tab.prototype.removeRows = function(rows, callback) {
        var tab = this;
        var shouldAnimate = true;//rows.length <= 20;
        if (shouldAnimate) {
            var rowsComplete = 0,
                totalRows = rows.length,
                $rows = jQuery(rows),
                $cloned = $rows.clone(true, true);
            this.tabManager.animateHideRows($rows, function() {
                var $allRows = tab.$getFieldRows();
                // get row indices
                var table = tab.$getTable()[0];
                if (table) {
                    // selected indices, reversed
                    var indices = jQuery.makeArray($rows.map(function(i, e) { return $allRows.index(e); }));
                    indices.sort(function(a,b) { return b-a; });
                    for (var i = 0; i < indices.length; i++) {
                        table.deleteRow(indices[i]);
                    }
                    if (!tab.hasRows()) {
                        tab.setStepEmptyMessage(true);
                    }
                    callback && callback.call(this, $cloned);
                }
                
                enableFormButtons();
                   removeOverlay();
            });
        } else {
            addOverlay(null, true);
            setTimeout(function() {
                jQuery(rows).hide().remove();
                if (!tab.hasRows()) {
                    tab.setStepEmptyMessage(true);
                }
                if (callback) {
                    jQuery(rows).each(function(i, e) {
                        callback && callback.apply($cloned.get(i));
                    });
                   }
                   removeOverlay();
                 }, 100);
        }
    };
    Tab.prototype.addRows = function(rows, callback) {
        var $rows = jQuery(rows);
        var shouldAnimate = false;
        $rows.find('.hideOnIgnore').toggleClass('hiddenCell', this.isIgnored());
        this.getContent().find('.tblFields tbody:last').append($rows);
        //if (shouldAnimate) {
        //       this.tabManager.animateShowRows(jQuery(rows), function() {
        //           callback && callback.apply(this);
        //       });
           //} else {
               $rows.css('opacity', 1).show();
               if (callback) {
                   jQuery(rows).each(function(i, e) {
                       callback && callback.apply(e);
                   });
               }
               this.initContent();
           //}
           this.setStepEmptyMessage(false);
    };
    Tab.prototype.setSelectAllCheckbox = function(checked) {
        this.getContent().find('.selectall').prop('checked', checked);
    };
    Tab.prototype.$getMoveFieldsDropdown = function() {
        return this.getContent().find('.selectMoveFields');
    };
    Tab.prototype.getIndex = function() {
        return this.tabManager.getTabIndex(this);
    };
    Tab.prototype.activate = function() {
        this.tabManager.goToIndex(this.getIndex());
    };
    var logOutput = false;
    function log(msg) {
        window.logOutput && window.console && window.console.log && window.console.log(msg);
    };
</script>
<apex:outputPanel id="js">
    <script type="text/javascript">
        jQuery(function () {
            /*
            jQuery('[id="ap:af:pb:fpbs"]').addClass('dlPageBlock');
            jQuery('div.selectedTab').parent().addClass('selectedTab');
            jQuery('div.notSelectedTab').parent().addClass('notSelectedTab');
            jQuery('[id$=":fieldType"]').each(function() {
                listValuesVisibility(this);
            });
            */
            jQuery('body').click(function(e) { if (!jQuery(e.target).hasClass('jqInfoIcon')) jQuery('#listHelp,#validationHelp').hide(); });
            jQuery('#validationHelp li').click(function(e) {
                if (jQuery('#validationHelp').prop('val'))
                    jQuery('[id="'+jQuery('#validationHelp').prop('val')+'"]').text(jQuery(e.target).attr('val'));
            });
            jQuery('#listHelp li').click(function(e) {
                if (jQuery('#listHelp').prop('val'))
                    jQuery('[id="'+jQuery('#listHelp').prop('val')+'"]').text(jQuery(e.target).attr('val').replace(/\|/g, '\n'));
            });
            //jQuery('form.myForm input, form.myForm textarea').live('keyup', keyUp);
            //jQuery(document).on('keyup', 'form.myForm input, form.myForm textarea', keyUp);
            
            // Initialize form buttons
            jQuery('.btnSave,.btnQuickSave,.btnSaveAndRun').unbind('click').click(function() {
                var isDisabled = jQuery(this).hasClass('btnDisabled');
                if (!isDisabled) {
                    var $btn = jQuery(this);
                    var updateInfo = tabs.getSyncData();
                    addOverlay('Saving form...');
                    var f = quickSave;
                    if ($btn.hasClass('btnQuickSave')) {
                        disableAllFormButtonsButCancel();
                    } else {
                        disableFormButtons('Saving...');
                        if ($btn.hasClass('btnSave'))
                            f = save;
                            else if ($btn.hasClass('btnSaveAndRun'))
                                f = saveAndRun;
                    }
                    f(tabs.getCurrentStepId(), JSON.stringify(updateInfo));
                }
                return false;
            });
            jQuery('.btnLoadNewFields').unbind('click').click(function() {
                var isDisabled = jQuery(this).hasClass('btnDisabled');
                if (!isDisabled) {
                    tabs.loadAdditionalFields('Checking for additional fields...');
                }
                return false;
            });
            jQuery('.btnActions').unbind('click').click(function() {
                var isDisabled = jQuery(this).hasClass('btnDisabled');
                if (!isDisabled) {
                    if (this.value == 'View Rules') {
                        tabs.showRules();
                        this.value = 'View Form';
                    } else {
                        tabs.showForm();
                        this.value = 'View Rules';
                    }
                }
                return false;
            });
            jQuery.notifie({
                allowCompatibilityView: false,
                requiredVersion: 7,
                containerSelector: '#ieMsgs',
                compatibilityViewMessage: '{!JSENCODE($Label.IE_Compatibility_View_Warning)}',
                versionMessage: '{!JSENCODE($Label.IE_Higher_Version_Required)}'
            });
        });
    </script>
</apex:outputPanel>
    <apex:sectionHeader title="Form Edit" subtitle="{!ddpWrapper.DDP.Name}" help="http://support.drawloop.com/loop-platform/4-edit-forms/"/>
    <div id="ieMsgs" />
    <apex:outputPanel id="pageMsgs">
        <apex:pageMessages />
        <span></span>
    </apex:outputPanel>
    <!--  New Form -->
    <apex:form id="afNew">
        <apex:pageBlock title="Form Edit" mode="edit" id="pb">
            <apex:actionFunction name="addUpdateAction" reRender="panelActions,pageMsgs" action="{!addUpdateAction}">
                <apex:param value="" assignTo="{!ajaxActionInfoStr}" name="actionInfo" />
                <apex:param value="" assignTo="{!ajaxUpdateInfoStr}" name="updateInfo" />
            </apex:actionFunction>
            <apex:actionFunction name="addStep" reRender="tabs,pageMsgs" action="{!addNewStep}">
                <apex:param value="" assignTo="{!ajaxStepName}" name="stepName" />
                <apex:param value="" assignTo="{!ajaxUpdateInfoStr}" name="updateInfo" />
            </apex:actionFunction>
            <apex:actionFunction name="deleteStep" reRender="tabs,pageMsgs" action="{!deleteStep}">
                <apex:param value="" assignTo="{!ajaxStepId}" name="stepId" />
                <apex:param value="" assignTo="{!ajaxUpdateInfoStr}" name="updateInfo" />
            </apex:actionFunction>
            <apex:actionFunction name="addFields" reRender="tabs,pageMsgs" action="{!addNewFields}">
                <apex:param value="" assignTo="{!ajaxStepId}" name="stepId" />
                <apex:param value="" assignTo="{!ajaxAddFieldsInfoStr}" name="addFieldInfo" />
                <apex:param value="" assignTo="{!ajaxUpdateInfoStr}" name="updateInfo" />
            </apex:actionFunction>
            <apex:actionFunction name="loadAdditionalFields" reRender="tabs,pageMsgs" action="{!loadAdditionalFields}">
                <apex:param value="" assignTo="{!ajaxStepId}" name="stepId" />
                <apex:param value="" assignTo="{!ajaxUpdateInfoStr}" name="updateInfo" />
            </apex:actionFunction>
            <apex:actionFunction name="saveAndRun" reRender="tabs,panelActions,pageMsgs" action="{!performSaveAndRun}">
                <apex:param value="" assignTo="{!ajaxStepId}" name="currentStepId" />
                <apex:param value="" assignTo="{!ajaxUpdateInfoStr}" name="updateInfo" />
            </apex:actionFunction>
            <apex:actionFunction name="quickSave" reRender="tabs,panelActions,pageMsgs" action="{!performQuickSave}">
                <apex:param value="" assignTo="{!ajaxStepId}" name="currentStepId" />
                <apex:param value="" assignTo="{!ajaxUpdateInfoStr}" name="updateInfo" />
            </apex:actionFunction>
            <apex:actionFunction name="save" reRender="tabs,panelActions,pageMsgs" action="{!performSave}">
                <apex:param value="" assignTo="{!ajaxStepId}" name="currentStepId" />
                <apex:param value="" assignTo="{!ajaxUpdateInfoStr}" name="updateInfo" />
            </apex:actionFunction>
            <apex:pageBlockButtons >
                <apex:commandButton value="Save and Run" styleClass="btnSaveAndRun" style="border: 2px solid green;" rendered="{!ddpWrapper.DDP.RecordType.Name=='Form'}" />
                <apex:commandButton value="View Rules" title="View conditional actions for this form." styleClass="btnActions" />
                <apex:commandButton value="Load New Fields" title="Any new fields added to your {!$ObjectType.Loop__DDP_File__c.labelPlural} will be added to the current step of the form." styleClass="btnLoadNewFields" />
                <apex:commandButton value="Quick Save" styleClass="btnQuickSave" />
                <apex:commandButton value="Save" styleClass="btnSave" />
                <apex:commandButton value="Cancel" styleClass="btnCancel" action="{!cancel}" immediate="true" />
            </apex:pageBlockButtons>
            <!-- Message to first-time users -->
            <apex:pageBlockSection columns="1" id="pbs">
                <apex:pageBlockSectionItem rendered="{!AND(showEditFormMessage,ddpWrapper.DDP.RecordType.Name='Form')}" >
                    <apex:pageMessage severity="info" summary="Click Save and Run to test. You can edit your {!$ObjectType.Loop__DDP__c.label} form fields below. For help, click the Help for this Page link at the top right corner of this page.">
                        <apex:commandLink value="Remove this message." style="margin-left: 8px; font-size: 80%;" action="{!hideEditFormMessage}" rerender="pbs" status="removeMessage" />
                        <apex:actionStatus id="removeMessage" startText="• • •" stopText="" style="font-size: 80%;" />
                    </apex:pageMessage>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem rendered="{!AND(showEditFormMessage,ddpWrapper.DDP.RecordType.Name!='Form')}" >
                    <apex:pageMessage severity="info" summary="You can edit your {!$ObjectType.Loop__DDP__c.label} form fields below. For help, click the Help for this Page link at the top right corner of this page.">
                        <apex:commandLink value="Remove this message." style="margin-left: 8px; font-size: 80%;" action="{!hideEditFormMessage}" rerender="pbs" status="removeMessage2" />
                        <apex:actionStatus id="removeMessage2" startText="• • •" stopText="" style="font-size: 80%;" />
                    </apex:pageMessage>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <apex:outputPanel styleClass="pbInfo" layout="block" id="quickSaveStatus">
                        <apex:outputPanel rendered="{!quickSaved}" id="quickSaveSpan">
                            Save was successful.
                            <script>jQuery('[id$=":quickSaveSpan"]').delay(2000).fadeOut(1000)</script>
                        </apex:outputPanel>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
            <apex:outputPanel id="panelActions" styleClass="invisible">
                <div class="rulesContainer">
                    <apex:pageBlockTable value="{!manager.AllRules}" var="rule">
                        <apex:column headerValue="Action">
                            <apex:outputLink styleClass="actionEdit">Edit</apex:outputLink>&nbsp;|&nbsp;<apex:outputLink styleClass="actionDelete">Del</apex:outputLink>
                        </apex:column>
                        <!-- <apex:column headerValue="{!$ObjectType.Form_Rule__c.fields.Name.label}">
                            <apex:outputLabel value="{!rule.Rule.Name}" styleClass="actionName" />
                        </apex:column>
                        <apex:column headerValue="{!$ObjectType.Form_Rule__c.fields.Operation__c.label}">
                            <apex:outputLabel value="{!rule.Rule.Operation__c}" styleClass="actionOperation" />
                        </apex:column>-->
                        <apex:column headerValue="{!$ObjectType.Loop__Form_Rule__c.fields.Loop__Conditions__c.label}">
                            <apex:repeat value="{!rule.Conditions}" var="condition">
                                <div><apex:outputLabel value="{!condition.Expression}" /></div>
                            </apex:repeat>
                            <apex:outputPanel rendered="{!rule.Rule.Loop__Advanced_Conditions__c != ''}"><strong>Filter Logic: </strong><apex:outputlabel value="{!rule.Rule.Loop__Advanced_Conditions__c}" /></apex:outputPanel>
                            <input type="hidden" value="{!rule.Rule.Conditions__c}" class="actionConditions" />
                            <input type="hidden" value="{!rule.Rule.Loop__Advanced_Conditions__c}" class="advancedConditions" />
                            <input type="hidden" value="{!rule.UniqueId}" class="uid" />
                        </apex:column>
                        <apex:column headerValue="{!$ObjectType.Loop__Form_Rule__c.fields.Loop__Actions__c.label}">
                            <apex:repeat value="{!rule.Actions}" var="action">
                                <apex:outputPanel layout="block">
                                    <apex:outputLabel value="{!action.ActionMessage}" />
                                </apex:outputPanel>
                            </apex:repeat>
                            <apex:outputText styleClass="actionOperationData invisible" value="{!rule.SerializedActions}" />
                        </apex:column>
                    </apex:pageBlockTable>
                    <div class="addRuleContainer">
                        <apex:outputLink value="javascript:;" styleClass="addRule">Add Rule</apex:outputLink>
                    </div>
                </div>
                <script type="text/javascript">initializeActionsPanel({!showRules});</script>
            </apex:outputPanel>
            <apex:outputPanel id="panelAddAction" styleClass="invisible">
                <!-- <apex:pageBlockSection columns="1" title="Step 1. Enter Action Details">
                    <apex:pageBlockSectionItem >
                        <label class="panelLabel" for="actionName">Name</label>
                        <input name="actionName" class="actionName" />
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem >
                        <label class="panelLabel" for="Type">Type</label>
                        <select name="actionOperation" class="actionOperation">
                            <option value="Hide">Hide Steps / Fields</option>
                            <option value="Show">Show Steps / Fields</option>
                        </select>
                    </apex:pageBlockSectionItem>
                </apex:pageBlockSection> -->
                <apex:pageBlock >
                    <apex:pageBlockSection columns="1" title="Step 1. Specify Filter Criteria">
                        <apex:pageBlockSectionItem >
                            <apex:outputPanel >
                                <h4>Filter By:</h4>
                                <table class="tblFilter">
                                    <tr>
                                        <th>&nbsp;</th>
                                        <th>Field</th>
                                        <th>Operator</th>
                                        <th>Value</th>
                                    </tr>
                                    <tr>
                                        <td><span>1.</span></td>
                                        <td>
                                            <select class="fieldList"></select>
                                        </td>
                                        <td>
                                            <select class="operator">
                                                <apex:repeat value="{!manager.RuleOperators}" var="op">
                                                    <option value="{!op}">{!op}</option>
                                                </apex:repeat>
                                            </select>
                                        </td>
                                        <td><input class="fieldValue" /></td>
                                    </tr>
                                    <tr>
                                        <td><span>2.</span></td>
                                        <td>
                                            <select class="fieldList"></select>
                                        </td>
                                        <td>
                                            <select class="operator">
                                                <apex:repeat value="{!manager.RuleOperators}" var="op">
                                                    <option value="{!op}">{!op}</option>
                                                </apex:repeat>
                                            </select>
                                        </td>
                                        <td><input class="fieldValue" /></td>
                                    </tr>
                                    <tr>
                                        <td><span>3.</span></td>
                                        <td>
                                            <select class="fieldList"></select>
                                        </td>
                                        <td>
                                            <select class="operator">
                                                <apex:repeat value="{!manager.RuleOperators}" var="op">
                                                    <option value="{!op}">{!op}</option>
                                                </apex:repeat>
                                            </select>
                                        </td>
                                        <td><input class="fieldValue" /></td>
                                    </tr>
                                    <tr>
                                        <td><span>4.</span></td>
                                        <td>
                                            <select class="fieldList"></select>
                                        </td>
                                        <td>
                                            <select class="operator">
                                                <apex:repeat value="{!manager.RuleOperators}" var="op">
                                                    <option value="{!op}">{!op}</option>
                                                </apex:repeat>
                                            </select>
                                        </td>
                                        <td><input class="fieldValue" /></td>
                                    </tr>
                                    <tr>
                                        <td><span>5.</span></td>
                                        <td>
                                            <select class="fieldList"></select>
                                        </td>
                                        <td>
                                            <select class="operator">
                                                <apex:repeat value="{!manager.RuleOperators}" var="op">
                                                    <option value="{!op}">{!op}</option>
                                                </apex:repeat>
                                            </select>
                                        </td>
                                        <td><input class="fieldValue" /></td>
                                    </tr>
                                </table>
                                <div class="advancedConditionsSection">
                                    Advanced Filter Conditions:<br />
                                    <input type="text" class="advancedConditions" value="" size="60" />
                                    <apex:outputLink value="/help/doc/en/working_with_advanced_filter_conditions_in_reports_and_list_views.htm" target="_blank" styleClass="tipsLink">
                                        <span class="helpLink">Tips</span>
                                        <img class="helpIcon" title="Help" alt="Help" src="/s.gif" />
                                    </apex:outputLink>
                                </div>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                    </apex:pageBlockSection>
                    <apex:pageBlockSection columns="1" title="Step 2. Add Actions">
                        <apex:pageBlockSectionItem >
                            <table class="tblActions">
                                <colgroup>
                                    <col width="20" />
                                    <col width="160" />
                                    <col />
                                    <col width="20" />
                                </colgroup>
                                <tr>
                                    <th>&nbsp;</th>
                                    <th>Operation</th>
                                    <th>Data</th>
                                    <th/>
                                </tr>
                                <tr class="addActionRow">
                                    <td>1.</td>
                                    <td>
                                        <select class="operationType">
                                            <option value="Disable">Disable</option>
                                            <option value="Hide">Hide</option>
                                            <option value="DisplayErrorMessage">Display Error Message</option>
                                        </select>
                                        <input type="hidden" class="operationData" />
                                    </td>
                                    <td>
                                        <div class="text addStepsSection"><a href="javascript:;" class="addSteps">Add Steps</a></div>
                                        <div class="text addFieldsSection"><a href="javascript:;" class="addFields">Add Fields</a></div>
                                        <div class="text addMessageSection">Message: <a href="javascript:;" class="addMessage">Invalid Entry</a></div>
                                    </td>
                                    <td><a href="javascript:;" class="removeRow"><img src="/s.gif" title="Remove Action" /></a></td>
                                </tr>
                            </table>
                            <a href="javascript:;" class="addAction">Add Action</a>
                        </apex:pageBlockSectionItem>
                    </apex:pageBlockSection>
                </apex:pageBlock>
                <div class="itemPicker invisible">
                    <table>
                        <tr>
                            <th>Available</th>
                            <th/>
                            <th>Selected</th>
                            <th/>
                        </tr>
                        <tr>
                            <td><select class="available" multiple="multiple"></select></td>
                            <td class="moveOptionsCell">
                                <div class="text">Add</div>
                                <div class="text">
                                    <a href="javascript:;" class="btnAdd">
                                        <img src="/s.gif" alt="Add" class="rightArrowIcon" title="Add" />
                                    </a>
                                </div>
                                <div class="text">
                                    <a href="javascript:;" class="btnRemove">
                                        <img src="/s.gif" alt="Remove" class="leftArrowIcon" title="Remove" />
                                    </a>
                                </div>
                                <div class="text">Remove</div>
                            </td>
                            <td><select class="selected" multiple="multiple"></select></td>
                            <td><apex:commandButton value="Update" styleClass="btnItemPicker" /></td>
                        </tr>
                    </table>
                </div>
                <div class="panelActionBtns">
                    <apex:commandButton value="OK" styleClass="btnActionDone" />
                    <apex:commandButton value="Cancel" styleClass="btnActionCancel" />
                </div>
            </apex:outputPanel>
            <apex:outputPanel id="panelEditMessage" styleClass="invisible">
                <apex:pageBlock >
                    <apex:pageBlockSection columns="1">
                        <apex:pageBlockSectionItem >
                            <label for="messageType">Type</label>
                            <select name="messageType" class="messageType">
                                <option value="Title">Title</option>
                                <option value="Note">Note</option>
                            </select>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem >
                            <label for="messageText">Text</label>
                            <textarea name="messageText" class="messageText"></textarea>
                        </apex:pageBlockSectionItem>
                    </apex:pageBlockSection>
                </apex:pageBlock>
                <div class="panelActionBtns">
                    <apex:commandButton value="OK" styleClass="btnActionDone" />
                    <apex:commandButton value="Cancel" styleClass="btnActionCancel" />
                </div>
            </apex:outputPanel>
            <apex:outputPanel id="tabs">
                <apex:outputPanel styleClass="bgdl" layout="block" id="stepsDiv">
                    <ul class="tabs" style="float: none;">
                        <apex:repeat value="{!manager.AllSteps}" var="step">
                            <li class="tab pointer">
                                <apex:outputPanel layout="block" styleClass="outer">
                                    <div>
                                        <span class="pointer name">{!IF(!step.IsIgnored, step.Step.Name, 'Ignored Fields')}</span>
                                        <input type="hidden" class="uniqueId" value="{!HTMLENCODE(step.UniqueId)}" />
                                        <apex:image value="https://apps.drawloop.com/images/icons/platform/edit.gif"
                                            style="padding: 0 2px;" styleClass="pointer edit" alt="edit" rendered="{!NOT(step.IsIgnored)}" />
                                        <apex:image alt="delete" value="https://apps.drawloop.com/images/icons/platform/cross.png" styleClass="pointer delete" rendered="{!NOT(step.IsIgnored)}" />
                                    </div>
                                </apex:outputPanel>
                            </li>
                        </apex:repeat>
                        <li onclick="var ns = prompt('Step Name', ''); if (ns) return tabs.addStep(ns); else return false;">
                            <div class="outer pointer notSelectedTab"><span style="padding-right: 5px;">
                                <img src="https://apps.drawloop.com/graphics/icons/add_16.gif" />
                                Add Step
                            </span></div>
                        </li>
                    </ul>
                </apex:outputPanel>
                <apex:outputPanel layout="block" id="pbsOP" styleClass="content">
                    <apex:repeat value="{!manager.AllSteps}" var="step">
                        <apex:pageBlockSection title="{!$ObjectType.Loop__Form_Field__c.labelPlural}" collapsible="false" id="fpbs" columns="1">
                            <apex:outputPanel >
                                <apex:selectList styleClass="selectMoveFields" size="1">
                                    <apex:selectOption itemLabel="--move to--" itemValue="" />
                                    <apex:selectOptions value="{!step.stepOptions}" />
                                </apex:selectList>
                                <apex:commandButton value="Ignore" title="Ignore selected fields" styleClass="btnIgnore" rendered="{!NOT(step.IsIgnored)}" />
                                <apex:commandButton value="Add Field" title="Add a Field to the form" styleClass="btnAddField" rendered="{!NOT(step.IsIgnored)}" action="{!manager.AddField}" rerender="pbt">
                                    <apex:param name="currentStepUniqueId" value="{!step.UniqueId}" assignTo="{!manager.currentStepUniqueId}"/>
                                </apex:commandButton>
                                <apex:commandButton value="Add Title" title="Add a Title to the form" styleClass="btnAddTitle" rendered="{!NOT(step.IsIgnored)}" />
                                <apex:commandButton value="Add Note" title="Add a Note to the form" styleClass="btnAddNote" rendered="{!NOT(step.IsIgnored)}" />
                                <apex:commandButton value="Delete" title="Delete selected fields" styleClass="btnDelete" rendered="{!step.IsIgnored}" />
                                <apex:outputPanel rendered="{!step.IsIgnored}">
                                    Fields in this section will not be included in the web form.
                                </apex:outputPanel>
                            </apex:outputPanel>
                            <apex:pageBlockTable value="{!step.FieldList}" var="f" id="pbt" rowClasses="topAlign" styleClass="tblFields">
                                <apex:column id="fieldSelect" headerClass="colSelect" styleClass="colSelect">
                                    <apex:facet name="header">
                                        <input type="checkbox" value="on" class="selectall" />          
                                    </apex:facet>
                                    <input type="checkbox" value="{!HTMLENCODE(f.UniqueId)}" class="select" />
                                </apex:column>
                                <apex:column headerValue="{!$ObjectType.Loop__Form_Field__c.fields.Loop__Tag__c.label}" style="cursor: move;" colspan="{!IF(f.IsTextOnly, 8, 1)}">
                                    <apex:outputPanel rendered="{!f.IsTextOnly}">
                                        <strong>{!IF(f.field.Loop__Type__c == 'Note', 'Note', 'Title')}: </strong><apex:outputLabel styleClass="text" value="{!f.field.Loop__Default_Value__c}" />
                                        <div>
                                            <a href="javascript:;" class="editText">Edit</a>
                                        </div>
                                        <apex:inputHidden id="textType" value="{!f.field.Loop__Type__c}" />
                                        <apex:inputHidden id="textValue" value="{!f.field.Loop__Default_Value__c}" />
                                        <input type="hidden" value="{!f.field.Loop__Tag__c}" id="fieldTag" />
                                    </apex:outputPanel>
                                    <apex:outputPanel rendered="{!!f.IsTextOnly}">
                                        <apex:outputField value="{!f.field.Loop__Tag__c}" rendered="{!!f.IsNewField}" id="fieldTag"/>
                                        <apex:inputField value="{!f.field.Loop__Tag__c}" required="true" rendered="{!f.IsNewField}"/>
                                        <apex:inputHidden value="{!f.field.Loop__Order__c}" id="fieldOrder" />
                                    </apex:outputPanel>
                                </apex:column>
                                <apex:column headerValue="{!$ObjectType.Loop__Form_Field__c.fields.Name.label}" headerClass="{!IF(step.IsIgnored, 'hiddenCell', '')}" styleClass="hideOnIgnore {!IF(step.IsIgnored, 'hiddenCell', '')}" rendered="{!!f.IsTextOnly}">
                                    <apex:inputField value="{!f.field.Name}" required="true" styleClass="fieldName" />
                                </apex:column>
                                <apex:column headerValue="{!$ObjectType.Loop__Form_Field__c.fields.Loop__Type__c.label}" headerClass="{!IF(step.IsIgnored, 'hiddenCell', '')}" styleClass="hideOnIgnore {!IF(step.IsIgnored, 'hiddenCell', '')}" rendered="{!!f.IsTextOnly}">
                                    <apex:inputField value="{!f.field.Loop__Type__c}" required="true" id="fieldType" styleClass="fldFieldType" />
                                </apex:column>
                                <apex:column headerValue="{!$ObjectType.Loop__Form_Field__c.fields.Loop__Default_Value__c.label}" headerClass="{!IF(step.IsIgnored, 'hiddenCell', '')}" styleClass="hideOnIgnore {!IF(step.IsIgnored, 'hiddenCell', '')}" rendered="{!!f.IsTextOnly}">
                                    <apex:outputPanel id="defaultPanel" styleClass="defaultspan {!IF(f.UsesSalesforceDefaultValue, 'sfDefaultValueOn', '')}">
                                        <apex:outputPanel style="white-space: nowrap;" styleClass="defaultView">
                                            <apex:inputField value="{!f.field.Loop__Default_Value__c}" />
                                            <a href="javascript:;"><img class="lookupIcon" title="select platform value" src="/s.gif" /></a>
                                        </apex:outputPanel>
                                        <apex:actionRegion >
                                            <apex:outputPanel style="white-space: nowrap;" layout="block" styleClass="sfObjectView">
                                                <apex:inputHidden id="usesSalesforceDefaultValue" value="{!f.UsesSalesforceDefaultValue}" />
                                                <apex:selectList size="1" value="{!f.sfObject}">
                                                    <apex:selectOptions value="{!f.Step.Manager.AvailableObjects}" />
                                                    <apex:actionSupport event="onchange" rerender="sfFieldsPanel,fieldSearchPanel,pageMsgs" action="{!f.changeObject}" status="changeObjectOrField">
                                                        <apex:param value="{!f.sfObject}" name="sfObject" />
                                                    </apex:actionSupport>
                                                </apex:selectList>
                                                <a href="javascript:;" class="hideSFDefaultValueView" ><apex:image value="https://apps.drawloop.com/images/icons/platform/cross.png" title="use text value" /></a>
                                                <apex:actionStatus id="changeObjectOrField" >
                                                    <apex:facet name="start">
                                                        <span class="statusContainer"><span class="status"><img src="/img/loading.gif" alt="Processing..." width="16" height="16" title="Processing..." /></span></span>
                                                    </apex:facet>
                                                </apex:actionStatus>                            
                                            </apex:outputPanel>
                                            <br/>
                                            <apex:outputPanel id="fieldSearchPanel" styleClass="sfFieldView">
                                                <apex:outputLabel for="fieldSearch" value="Search:" styleClass="inlineSearch" rendered="{!f.useFieldSearch}"/>
                                                <apex:inputText id="fieldSearch" value="{!f.fieldSearch}" styleClass="inlineSearch slds-input" rendered="{!f.useFieldSearch}">
                                                    <apex:actionSupport event="onchange" action="{!f.clearSfFields}" rerender="sfFieldsPanel,pageMessages" />
                                                </apex:inputText>
                                            </apex:outputPanel>
                                            <apex:outputPanel style="white-space: nowrap;" id="sfFieldsPanel" styleClass="sfFieldView">
                                                <apex:outputText styleClass="errorMsg" value="{!'The search returned more than the maximum number of fields (' + Text(f.MaxFields) + '). Please refine your search criteria.'}" rendered="{!f.sfFieldsLimited.size >= f.MaxFields}"/>
                                                <apex:outputPanel layout="block">
                                                    <apex:selectList size="1" value="{!f.sfField}" id="sfFields" styleClass="sfFields" onchange="toggleAddDaysView(this);">
                                                        <apex:selectOptions value="{!f.sfFieldsLimited}" />
                                                    </apex:selectList>
                                                    <apex:outputPanel id="addDays" styleClass="addDaysView {!IF(f.sfField!='Today+', 'hidden', '')}">
                                                        <apex:inputText styleClass="addDays" value="{!f.todayPlusStr}" title="additional days" style="width: 50px;" />
                                                    </apex:outputPanel>
                                                </apex:outputPanel>
                                            </apex:outputPanel>
                                        </apex:actionRegion>
                                    </apex:outputPanel>
                                </apex:column>
                                <apex:column headerValue="{!$ObjectType.Loop__Form_Field__c.fields.Loop__Help_Text__c.label}" headerClass="{!IF(step.IsIgnored, 'hiddenCell', '')}" styleClass="hideOnIgnore {!IF(step.IsIgnored, 'hiddenCell', '')}" rendered="{!!f.IsTextOnly}">
                                    <apex:inputField value="{!f.field.Loop__Help_Text__c}" />
                                </apex:column>
                                <apex:column style="white-space: nowrap;" headerValue="{!$ObjectType.Loop__Form_Field__c.fields.Loop__List_Values__c.label}" headerClass="{!IF(step.IsIgnored, 'hiddenCell', '')}" styleClass="hideOnIgnore {!IF(step.IsIgnored, 'hiddenCell', '')}" rendered="{!!f.IsTextOnly}">
                                    <span class="conListValues">
                                        <apex:inputField value="{!f.field.Loop__List_Values__c}" id="listItems" />
                                        <apex:image styleClass="jqInfoIcon" value="https://apps.drawloop.com/images/icons/platform/information.png" id="listItemsHelp"
                                            onclick="var o = jQuery(this).position(); jQuery('#listHelp').css({ top:o.top, left:o.left+16 }).prop('val',jQuery(this).prev().prop('id')).toggle();" />
                                    </span>
                                </apex:column>
                                <apex:column style="white-space: nowrap;" headerValue="{!$ObjectType.Loop__Form_Field__c.fields.Loop__Validation__c.label}" headerClass="{!IF(step.IsIgnored, 'hiddenCell', '')}" styleClass="hideOnIgnore {!IF(step.IsIgnored, 'hiddenCell', '')}" rendered="{!!f.IsTextOnly}">
                                    <apex:inputField value="{!f.field.Loop__Validation__c}" />
                                    <apex:image styleClass="jqInfoIcon" alt="info" value="https://apps.drawloop.com/images/icons/platform/information.png"
                                        onclick="var o = jQuery(this).position(); jQuery('#validationHelp').css({ top:o.top, left:o.left+16 }).prop('val',jQuery(this).prev().prop('id')).toggle();" />
                                </apex:column>
                                <apex:column headerValue="{!$ObjectType.Loop__Form_Field__c.fields.Loop__Error_Message__c.label}" headerClass="{!IF(step.IsIgnored, 'hiddenCell', '')}" styleClass="hideOnIgnore {!IF(step.IsIgnored, 'hiddenCell', '')}" rendered="{!!f.IsTextOnly}">
                                    <apex:inputField value="{!f.field.Loop__Error_Message__c}" />
                                </apex:column>
                            </apex:pageBlockTable>
                        </apex:pageBlockSection>
                    </apex:repeat>
                </apex:outputPanel>
                <script type="text/javascript">initializeTabs({!initTabsData});</script>
            </apex:outputPanel>
         </apex:pageBlock>
    </apex:form>
    <div class="jqInfo" id="listHelp" val="">
        Each item must be on its own line.  An item can contain a separate display and pass value by separating the values with a comma.
        <ul>
            <li class="pointer" val="Alabama,AL|Alaska,AK|Arizona,AZ|Arkansas,AR|California,CA|Colorado,CO|Connecticut,CT|Delaware,DE|Florida,FL|Georgia,GA|Hawaii,HI|Idaho,ID|Illinois,IL|Indiana,IN|Iowa,IA|Kansas,KS|Kentucky,KY|Louisiana,LA|Maine,ME|Maryland,MD|Massachusetts,MA|Michigan,MI|Minnesota,MN|Mississippi,MS|Missouri,MO|Montana,MT|Nebraska,NE|Nevada,NV|New Hampshire,NH|New Jersey,NJ|New Mexico,NM|New York,NY|North Carolina,NC|North Dakota,ND|Ohio,OH|Oklahoma,OK|Oregon,OR|Pennsylvania,PA|Rhode Island,RI|South Carolina,SC|South Dakota,SD|Tennessee,TN|Texas,TX|Utah,UT|Vermont,VT|Virginia,VA|Washington,WA|West Virginia,WV|Wisconsin,WI|Wyoming,WY"
                >States</li>
            <li class="pointer" val="1|2|3|4|5">Numbers 1 to 5</li>
            <li class="pointer" val="One,1|Two,2|Three,3|Four,4|Five,5">Text/Numbers 1 to 5</li>
            <li class="pointer" val="One|Two|Three|Four|Five">Text 1 to 5</li>
        </ul>
    </div>
    <div class="jqInfo" id="validationHelp" val="">
        <span>This can be any regular expression you wish to use to validate this field.</span><br />
        <br />
        <a target="_blank" href="http://regexlib.com/CheatSheet.aspx">Regular Expression Cheatsheet</a><br />
        <br />
        <span>Below is sample "required" validation.  To make any of them not required, replace the "^" at the beginning with "(^" and the "$" at the end with "$)|^$"</span>
        <ul>
            <li class="pointer" val="^\d+$">Integer</li>
            <li class="pointer" val="^(((January|February|March|April|May|June|July|August|September|October|November|December)(\s)([1-9]|0[1-9]|[12][0-9]|3[01]),(\s)([12][0-9]{3}))|(^(([1-9]|0[1-9]|1[012])[/\-]{1,1}([1-9]|0[1-9]|[12][0-9]|3[01])[/\-]{1,1}([12][0-9]{3}|[01][0-9]{1}))))$">
                Date</li>
            <li class="pointer" val="^((^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$))$">
                Email Address</li>
            <li class="pointer" val="^\d+(?:\.\d{0,2})?$">Number</li>
            <li class="pointer" val="^([0-9]*|\d*\.\d{1}?\d*)%$">Percent</li>
            <li class="pointer" val="^(\\$)(\d{1,3}(\,\d{3})*|([1-9]+\d*))(.\d{1,2})?$">
                U.S. Currency</li>
            <li class="pointer" val="^(1|\+1)?(\-|\.)?(\()?\d{3}(\))?(\s)?(-|\.)?\d{3}(-|\.)?\d{4}(\s)?((x|ext|ext.|extension)?(\s)?(\d{1,5}))?$">
                U.S. Phone Number</li>
            <li class="pointer" val="^\d{5}(-\d{4})?$">Zip Code</li>
            <li class="pointer" val="^([\s\S]){1,50}$">String</li>
            <li class="pointer" val="^s?https?:\/\/[-_.!~*'()a-zA-Z0-9;\/?:\@&=+\$,%#]+$">
                URL</li>
        </ul>
    </div>
</apex:page>